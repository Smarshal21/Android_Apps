// Generated by Dagger (https://dagger.dev).
package com.sammycode.notesample.di;

import com.sammycode.notesample.api.UserAPI;
import dagger.internal.DaggerGenerated;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;
import retrofit2.Retrofit;

@DaggerGenerated
@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class NetworkModule_ProvidesUserAPIFactory implements Factory<UserAPI> {
  private final NetworkModule module;

  private final Provider<Retrofit.Builder> retrofitBuilderProvider;

  public NetworkModule_ProvidesUserAPIFactory(NetworkModule module,
      Provider<Retrofit.Builder> retrofitBuilderProvider) {
    this.module = module;
    this.retrofitBuilderProvider = retrofitBuilderProvider;
  }

  @Override
  public UserAPI get() {
    return providesUserAPI(module, retrofitBuilderProvider.get());
  }

  public static NetworkModule_ProvidesUserAPIFactory create(NetworkModule module,
      Provider<Retrofit.Builder> retrofitBuilderProvider) {
    return new NetworkModule_ProvidesUserAPIFactory(module, retrofitBuilderProvider);
  }

  public static UserAPI providesUserAPI(NetworkModule instance, Retrofit.Builder retrofitBuilder) {
    return Preconditions.checkNotNullFromProvides(instance.providesUserAPI(retrofitBuilder));
  }
}
